---
title: Week 5 practice
format: live-html
engine: knitr
webr:
  packages:
    - tidyverse
---
## Prediction modelling

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

In **Week 5 Workshop** we are introducing classification and regression models for prediction.

## What is random?

In the week 4 interactable code we introduced the idea of random sampling when we generated a dataset of clusters. 

Setting a seed in random number generation will ensure that the sequence of numbers generated by the random number generator is reproducible. 

Here are examples:

### Randomly sampling a number between 0 and 1

`runif` will randomly select from a uniform distribution (random uniform).  `runif(1)` will generate a random number with equal probability from a uniform distribution between 0 and 1.
Try changing the seeds

```{webr}
#set seed so we get the same results each time
set.seed(42)
runif(1)
set.seed(42)
runif(1)
set.seed(42)
runif(1)
```

### Randomly sampling in sequence

The seed initialises the random number generator to a known state. Each time a seed is set to the same value, the sequence of random numbers generated after that point will be the same.

Try changing the seeds:

```{webr}
set.seed(42)
runif(1)
runif(1)
runif(1)
set.seed(42)
runif(1)
runif(1)
runif(1)
```

## Random and regular fields of points

The random field of points from Lecture 5.
`d1` is random points from the random uniform distribution:

```{webr}
N <- 1024
d1 <- tibble(x = runif(N), y = runif(N), type = 't1')
```

To create the evenly distributed bit (d2), you have to start with an even grid of points:

```{webr}
p <- seq(0,1, length.out = N / 32)

d2 <- expand.grid(p, p) %>%
  data.frame %>%
  rename(x = Var1, y = Var2) %>%
  mutate(type = 't2')
```

Then add a little bit of random noise to it:

```{webr}
pd <- (p[2]-p[1]) * 0.8

d2$x <- d2$x + (runif(N) * pd)
d2$y <- d2$y + (runif(N) * pd)
dim(d2)
```

Paste them together and plot it:

```{webr}
d <- rbind(d1, d2)
ggplot(d, aes(x = x, y = y)) +
  geom_point(size = 0.2) +
  facet_grid(. ~ type) +
  coord_equal() +
  theme_void()
```

## Coin flips
We haven't set a seed here - each time you run this cell, you will get different results. Try setting a seed.

```{webr}
sample(c('H','T'), size = 20, replace = T) %>% 
  paste(collapse = '')
```

## Roll a dice
We've set our seed to the current time! Why might we do this?

```{webr}
set.seed(Sys.time()) # why would you do this??
sample(1:6, 1)
```

The default random number generator for R is the Mersenne-Twister.
https://en.wikipedia.org/wiki/Mersenne_Twister

```{webr}
?.Random.seed
```

