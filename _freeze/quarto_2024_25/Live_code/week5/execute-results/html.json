{
  "hash": "33f01a85f925efb89a7f2d30939a0e55",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Week 5 practice\nformat: live-html\nengine: knitr\nwebr:\n  packages:\n    - tidyverse\n---\n\n## Prediction modelling\n\n::: {.cell}\n\n:::\n\n\n\nIn **Week 5 Workshop** we are introducing classification and regression models for prediction.\n\n## What is random?\n\nIn the week 4 interactable code we introduced the idea of random sampling when we generated a dataset of clusters. \n\nSetting a seed in random number generation will ensure that the sequence of numbers generated by the random number generator is reproducible. \n\nHere are examples:\n\n### Randomly sampling a number between 0 and 1\n\n`runif` will randomly select from a uniform distribution (random uniform).  `runif(1)` will generate a random number with equal probability from a uniform distribution between 0 and 1.\nTry changing the seeds\n\n\n::: {.cell}\n```{webr}\n#set seed so we get the same results each time\nset.seed(42)\nrunif(1)\nset.seed(42)\nrunif(1)\nset.seed(42)\nrunif(1)\n```\n:::\n\n\n### Randomly sampling in sequence\n\nThe seed initialises the random number generator to a known state. Each time a seed is set to the same value, the sequence of random numbers generated after that point will be the same.\n\nTry changing the seeds:\n\n\n::: {.cell}\n```{webr}\nset.seed(42)\nrunif(1)\nrunif(1)\nrunif(1)\nset.seed(42)\nrunif(1)\nrunif(1)\nrunif(1)\n```\n:::\n\n\n## Random and regular fields of points\n\nThe random field of points from Lecture 5.\n`d1` is random points from the random uniform distribution:\n\n\n::: {.cell}\n```{webr}\nN <- 1024\nd1 <- tibble(x = runif(N), y = runif(N), type = 't1')\n```\n:::\n\n\nTo create the evenly distributed bit (d2), you have to start with an even grid of points:\n\n\n::: {.cell}\n```{webr}\np <- seq(0,1, length.out = N / 32)\n\nd2 <- expand.grid(p, p) %>%\n  data.frame %>%\n  rename(x = Var1, y = Var2) %>%\n  mutate(type = 't2')\n```\n:::\n\n\nThen add a little bit of random noise to it:\n\n\n::: {.cell}\n```{webr}\npd <- (p[2]-p[1]) * 0.8\n\nd2$x <- d2$x + (runif(N) * pd)\nd2$y <- d2$y + (runif(N) * pd)\ndim(d2)\n```\n:::\n\n\nPaste them together and plot it:\n\n\n::: {.cell}\n```{webr}\nd <- rbind(d1, d2)\nggplot(d, aes(x = x, y = y)) +\n  geom_point(size = 0.2) +\n  facet_grid(. ~ type) +\n  coord_equal() +\n  theme_void()\n```\n:::\n\n\n## Coin flips\nWe haven't set a seed here - each time you run this cell, you will get different results. Try setting a seed.\n\n\n::: {.cell}\n```{webr}\nsample(c('H','T'), size = 20, replace = T) %>% \n  paste(collapse = '')\n```\n:::\n\n\n## Roll a dice\nWe've set our seed to the current time! Why might we do this?\n\n\n::: {.cell}\n```{webr}\nset.seed(Sys.time()) # why would you do this??\nsample(1:6, 1)\n```\n:::\n\n\nThe default random number generator for R is the Mersenne-Twister.\nhttps://en.wikipedia.org/wiki/Mersenne_Twister\n\n\n::: {.cell}\n```{webr}\n?.Random.seed\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}